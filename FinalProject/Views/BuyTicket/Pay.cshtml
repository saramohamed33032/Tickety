@model Ticket
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";


}
<script src="https://js.stripe.com/v3/"></script>

<style>
    /**
    * The CSS shown here will not be introduced in the Quickstart guide, but shows
    * how you can use CSS to style your Element's container.
    */
    .paySec {
        background-color: rgb(233, 240, 247);
        padding-top: 3%;
        padding-bottom: 5%;
        margin-top:10%;
        width: 50%;
        text-align: center;
        margin-left: 24%;
        box-shadow: 1rem 1rem 1rem rgba(176, 176, 176, 0.75);
    }
    .form-row{
        margin-left:10%!important;
    }
    #pay {
        margin-top: 5%;
        color:aliceblue;
        background-image: linear-gradient(to right,#9ba1ac, #232635) !important;
        border-color: #9ba1ac !important;
    }

    @@media only screen and (max-width: 600px) {
        .ElementsApp .InputElement {
            margin-right:2%!important;
        }
        }
        .StripeElement{
        box-sizing: border-box;
        min-width: 121%;
        padding: 3% 9%;
        border: 1px solid transparent;
        border-radius: 4px;
        background-color: white;
        transition: box-shadow 150ms ease;
        }


    .StripeElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
        border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
        background-color: #fefde5 !important;
    }
</style>
<section class="paySec">
    <div class="container">
        <form method="post" id="payment-form">
            <div class="form-row col-8 mt-5">
                <label for="card-element">

                </label>
                <div id="card-element">
                    <!-- A Stripe Element will be inserted here. -->
                </div>

                <!-- Used to display form errors. -->
                <div id="card-errors" role="alert"></div>
            </div>

            <button class="btn-lg w-25" id="pay">pay</button>
        </form>
    </div>
</section>
<script>
    // Create a Stripe client.
    var stripe = Stripe('pk_test_cCM1eNHWzUl3CRv7Uez1GqyF00aWf84HD8');

    // Create an instance of Elements.
    var elements = stripe.elements();

    // Custom styling can be passed to options when creating an Element.
    // (Note that this demo uses a wider set of styles than the guide below.)
    var style = {
        base: {
            color: '#32325d',
            fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
            fontSmoothing: 'antialiased',
            fontSize: '16px',
            '::placeholder': {
                color: '#aab7c4'
            }
        },
        invalid: {
            color: '#fa755a',
            iconColor: '#fa755a'
        }
    };

    // Create an instance of the card Element.
    var card = elements.create('card', { style: style });

    // Add an instance of the card Element into the `card-element` <div>.
    card.mount('#card-element');

    // Handle real-time validation errors from the card Element.
    card.addEventListener('change', function (event) {
        var displayError = document.getElementById('card-errors');
        if (event.error) {
            displayError.textContent = event.error.message;
        } else {
            displayError.textContent = '';
        }
    });

    // Handle form submission.
    var form = document.getElementById('payment-form');
    form.addEventListener('submit', function (event) {
        event.preventDefault();

        stripe.createToken(card).then(function (result) {
            if (result.error) {
                // Inform the user if there was an error.
                var errorElement = document.getElementById('card-errors');
                errorElement.textContent = result.error.message;
            } else {
                // Send the token to your server.
                stripeTokenHandler(result.token);
            }
        });
    });

    // Submit the form with the token ID.
    function stripeTokenHandler(token) {
        // Insert the token ID into the form so it gets submitted to the server
        var form = document.getElementById('payment-form');
        var hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', 'stripeToken');
        hiddenInput.setAttribute('value', token.id);
        form.appendChild(hiddenInput);
  
        // Submit the form
        form.submit();
    }
</script>


